Theory Questions

Explain the concept of React components. How do they contribute to building user 
interfaces in React? 

React components are reusable, self-contained units of code that define certain parts of a user interface. They promote modularity, reusability, and composition, making it easier to build and maintain complex UIs. Components can manage their own state, enabling dynamic and interactive user interfaces in React applications.

● What is JSX in React? Provide an example of JSX code and explain how it's 
transformed into JavaScript. 

JSX is a syntax extension in React that allows you to write HTML-like code in JavaScript. It makes the creation of React elements more concise. JSX gets transformed into regular JavaScript using a process called transpilation.

Example of JSX code:

Jsx const element = <h1>Hello, React!</h1>;
```

Transformed JavaScript:
Javascript const element = React.createElement('h1', null, 'Hello, React!');


JSX is transformed into `React.createElement` calls. The first argument is the type of element (e.g., 'h1'), the second argument is an object representing the element's properties (or `null` for no properties), and the subsequent arguments are the children of the element. The transformed code creates a virtual representation of the DOM structure, which React uses for efficient updates.

● Briefly describe the virtual DOM in React. How does it contribute to improving 
performance in web applications?

The virtual DOM in React is an in-memory representation of the real DOM. React uses it to optimize updates by comparing and minimizing changes before applying them to the actual DOM. This approach reduces direct manipulation of the DOM, leading to improved performance in web applications.
 
● List and explain three main phases of a React component's lifecycle. Provide an 
example of a situation where each phase might be useful. 

1. **Mounting:**
   - **Example:** Fetching data from an API when a component is first rendered (`componentDidMount`).

2. **Updating:**
   - **Example:** Updating the component state in response to user interactions (`componentDidUpdate`).

3. **Unmounting:**
   - **Example:** Cleaning up resources, such as event listeners, before a component is removed from the DOM (`componentWillUnmount`).

● Discuss the difference between props and state in React. In what scenarios would 
you use props, and in what scenarios would you use state? 

- Props:** Immutable, passed from parent to child components. Used for communication between components.
  
- State:** Mutable, managed within a component. Used for handling internal component state and triggering re-renders based on changes.

● Explain the significance of the shouldComponentUpdate method in the component 
lifecycle. How does it impact the rendering of components? 


`shouldComponentUpdate` determines if a component should re-render by returning `true` or `false`. It can optimize performance by preventing unnecessary re-renders and improving application efficiency.

